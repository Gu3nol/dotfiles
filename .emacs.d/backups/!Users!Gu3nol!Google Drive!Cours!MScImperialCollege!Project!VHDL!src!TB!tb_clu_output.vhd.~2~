---------------------------------------------------------
-- Testbench for the Top level Control Logic Unit
-- tb_clu.vhd
-- MSc Project 2015
-- @Author: Guénolé LALLEMENT

-- This VHDL code is implemented on-chip using
-- the Cadence Encounter tool

-- It is developed for an 8x8 hexagonal pixel array
-- and characterisation array
--------------------------------------------------------

LIBRARY IEEE;

USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.clu_pack.ALL;
USE work.ALL;

ENTITY tb_clu_output IS
  PORT(
    -- Master input clock
    mclk : OUT std_logic;
    -- SPI in
    din : std_logic_vector(15 DOWNTO 0);

);
END tb_clu_output;

ARCHITECTURE behav OF tb_clu IS

  SIGNAL mclk_i, rdy_i                    : sl;
  SIGNAL din_i, dout_i                    : slv(15 DOWNTO 0);
  SIGNAL adc_eoc_i, adc_start_i, adc_pd_i : sl;
  SIGNAL adc_data_i                       : slv(9 DOWNTO 0);
  SIGNAL col_i, row_i                     : slv(array_size-1 DOWNTO 0);
  SIGNAL anag_mux_i                       : slv(11 DOWNTO 0);

  SIGNAL op_cmd_i      : slv(1 DOWNTO 0);
  SIGNAL array_coord_i : slv(5 DOWNTO 0);
  SIGNAL anag_coord_i  : slv(3 DOWNTO 0);

  CONSTANT zero_pad : slv(3 DOWNTO 0) := (OTHERS => '0');

BEGIN

  -- Declaration of the clu instance
  clu_i : ENTITY clu
    GENERIC MAP(array_size)
    PORT MAP(
      mclk      => mclk_i,
      rdy       => rdy_i,
      din       => din_i,
      dout      => dout_i,
      adc_eoc   => adc_eoc_i,
      adc_start => adc_start_i,
      adc_pd    => adc_pd_i,
      adc_data  => adc_data_i,
      col       => col_i,
      row       => row_i,
      anag_mux  => anag_mux_i
      );

  -- Master clock generation
  clkgen : PROCESS
  BEGIN
    mclk_i <= '0';
    WAIT FOR 500 ns;
    mclk_i <= '1';
    WAIT FOR 500 ns;
  END PROCESS clkgen;

  -- nReset generation
  nrstgen : PROCESS
  BEGIN
    WAIT FOR 10 ns;
    op_cmd_i <= op_reset;
    WAIT FOR 1700 ns;
    op_cmd_i <= op_reset;
    WAIT FOR 2000 ns;
    op_cmd_i <= op_stop;
    WAIT FOR 10 us;
    op_cmd_i <= op_reset;
    WAIT FOR 1 us;
    op_cmd_i <= op_start;
    WAIT FOR 50 us;
op_cmd_i <= op_reset;
    WAIT FOR 2000 ns;
    REPORT "All tests finished OK, terminating with failure ASSERT."
      SEVERITY failure;
  END PROCESS nrstgen;

  -- Signal generation
  siggen : PROCESS
  BEGIN
    din_i    <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;
    WAIT FOR 500 ns;
    anag_coord_i  <= "0000";
    array_coord_i <= (OTHERS => '0');


    adc_eoc_i  <= '0';
    adc_data_i <= (OTHERS => '0');
din_i    <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;
    WAIT FOR 500 ns;
    din_i    <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;


    --FOR i IN 0 TO 63 LOOP
    --  WAIT FOR 500 ns;
    --  op_cmd_i      <= op_start;
    --  array_coord_i <= slv(to_unsigned(i, array_coord_i'length));
    --  din_i         <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;

    --END LOOP;

    FOR i IN 0 TO 12 LOOP
      WAIT FOR 500 ns;
      array_coord_i <= (OTHERS => '0');
      anag_coord_i  <= slv(to_unsigned(i, anag_coord_i'length));
      din_i         <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;

    END LOOP;

    WAIT FOR 500 ns;
    array_coord_i <= slv(to_unsigned(1, array_coord_i'length));
    din_i         <= zero_pad & anag_coord_i & op_cmd_i & array_coord_i;

  END PROCESS siggen;

END behav;
