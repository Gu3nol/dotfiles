
# Use hard limits, except for a smaller stack and no core dumps
unlimit
limit stack 8192
limit core 0
limit -s

# Set up aliases
alias mv='nocorrect mv'       # no spelling correction on mv
alias cp='nocorrect cp'       # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias j=jobs
alias h=history
alias grep=egrep
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lsa='ls -ld .*'
alias pico='nano -mw'
alias nano='nano -mw'
alias ssh='ssh -X'
alias more='less'
alias sl='ls'
alias cd..='cd ..'
alias emacs_c='open -a emacs'

# Options
setopt nobeep                      # keep quiet
setopt auto_cd                     # type directly a dir name to cd into it
setopt auto_pushd pushd_minus      # don't use cd, use pushd
setopt pushd_silent pushd_to_home
setopt pushd_ignore_dups
setopt chase_links                 # converts links to real path
setopt noclobber                   # don't allow > to clobber files
setopt complete_aliases
setopt extended_glob
setopt hist_ignore_all_dups
setopt hist_ignore_space
unsetopt share_history
setopt no_flow_control
setopt list_types
setopt mark_dirs
setopt path_dirs
setopt auto_remove_slash
setopt prompt_percent
setopt prompt_subst
setopt rm_star_wait                # rm * waits 10 seconds
setopt multios                     # allow multiple redirection echo 'a'>b>c
setopt bang_hist                   # allow ! for accessing history
setopt nohup                       # don't hup running jobs on logout.

# Initialize colors.
autoload -U colors
colors

# Autoload zsh functions.
fpath=(~/.zsh/functions $fpath)
autoload -U ~/.zsh/functions/*(:t)

# Enable auto-execution of functions.
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

# ls handling
if [[ -x `which gls` ]]; then
    alias rls=`which ls`
    alias ls='gls -h --color=auto '
# Unfortunatly GNU ls support -G.
elif [[ $(uname) != 'Linux' && -n `ls -G` && $? == 0 ]]; then
    alias ls='ls -G'
elif [[ -n `ls --color` && $? == 0 ]]; then
# Check if ls can handle the --color option. If it can it's probably gnu.
    alias ls='ls --color=auto'
fi

if [ `uname` = "Linux" ]; then
    export LS_COLORS="di=34;4:ln=35;4:ex=31:*.rpm=32:*.gz=32:*.tar=32:*.tgz=32"
fi

# Append git functions needed for prompt.
preexec_functions+='preexec_update_git_vars'
precmd_functions+='precmd_update_git_vars'
chpwd_functions+='chpwd_update_git_vars'

# Prompt
#PROMPT='%{$fg_no_bold[cyan]%}%t%{$reset_color%} %{$fg_no_bold[magenta]%}%n%{$reset_color%}%{$fg_no_bold[blue]%}@%m%{$reset_color%}$(prompt_git_info)%{${fg[default]}%}> '    # default prompt
PROMPT='%{$fg_no_bold[magenta]%}%n%{$reset_color%}%{$fg_no_bold[blue]%}@%m%{$reset_color%}$(prompt_git_info)%{${fg[default]}%}> '    # default prompt

RPROMPT="[%{$fg_no_bold[yellow]%}%~%{$reset_color%}]"

# (if running screen, show window #)
if [ x$WINDOW != x ]; then
    PROMPT='$WINDOW:'$PROMPT
fi


# Completion
zmodload -i zsh/complist

# Completion Styles

# list of completers to use
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' completer _expand _force_rehash _complete _approximate _ignored

# use cache
zstyle ':completion:*' use-cache on

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# generate descriptions with magic.
zstyle ':completion:*' auto-description 'specify: %d'

# use colors in completions
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# launch interactive menu if there is more that 3 possibilities
zstyle ':completion:*' menu select=3

# Don't prompt for a huge list, page it!
zstyle ':completion:*:default' list-prompt '%S%M matches%s'

# case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

unsetopt LIST_AMBIGUOUS
setopt  COMPLETE_IN_WORD

# Just look for hosts and users in the following lists
users=(root lallement)
hosts=('$(hostname)' localhost Mururoa a406-03.enst.fr a405-09.enst.fr ssh.enst.fr pandore.rezel.net pact.enst.fr)
zstyle ':completion:*' users $users
zstyle ':completion:*:hosts' hosts $hosts

# allow approximate matching
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion::approximate*:*' prefix-needed false
zstyle ':completion:*' auto-description 'Specify: %d'
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' verbose true
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.(o|c~|zwc)' '*?~' '*?.old' '*?.pro'

# Don't complete directory we are already in (../here)
zstyle ':completion:*' ignore-parents parent pwd

# pdf for xpdf
zstyle ':completion:*:xpdf:*' files '*.pdf'

# tar files
zstyle ':completion:*:tar:*' files '*.tar|*.tgz|*.tz|*.tar.Z|*.tar.bz2|*.tZ|*.tar.gz|*.tar.xz|*.txz'

# for cd, don't try username completions (~polti)
zstyle ':completion:*:cd:*' tag-order local-directories path-directories

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

#------------------------------
# ShellFuncs
#------------------------------
# -- coloured manuals
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

extract () {
        if [ -f $1 ] ; then
           case $1 in
                *.tar.bz2) tar xvjf $1 ;;
                *.tar.gz) tar xvzf $1 ;;
                *.bz2) bunzip2 $1 ;;
                *.rar) rar x $1 ;;
                *.gz) gunzip $1 ;;
                *.tar) tar xvf $1 ;;
                *.tbz2) tar xvjf $1 ;;
                *.tgz) tar xvzf $1 ;;
                *.zip) unzip $1 ;;
                *.Z) uncompress $1 ;;
                *.7z) 7z x $1 ;;
                *) echo "don't know how to extract '$1¡ä¡­" ;;
            esac
        else
                echo "'$1¡ä is not a valid file!"
        fi
}

# on slow disk access, show moving dots
expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

autoload -U compinit
compinit

# Format titles for screen and rxvt
precmd () {print -Pn "\e]2;%n@%m%#  %~ %l  %w :: %T\a"}
preexec () {print -Pn "\e]2;%n@%m%#  <$1>  %~ %l  %w :: %T\a"}


# Sourcing .ssh-agent
keychain -q
source ~/.keychain/$(hostname)-sh

# Misc settings
export EDITOR="nano -mw"
export LM_LICENSE_FILE=@flexlm.comelec.enst.fr

# Virtualenv
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
source /etc/bash_completion.d/virtualenvwrapper
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true

# PYTHONPATH
export PYTHONPATH=~/.site-packages:$PYTHONPATH

# OpenOCD
export PATH=$PATH:/opt/openocd/bin

# Tools ARM
export PATH=/opt/tools_arm/bin:$PATH

# MacPorts Installer addition on 2013-01-31_at_14:38:47: adding an appropriate PATH variable for use with MacPorts.
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
# Finished adapting your PATH environment variable for use with MacPorts.

