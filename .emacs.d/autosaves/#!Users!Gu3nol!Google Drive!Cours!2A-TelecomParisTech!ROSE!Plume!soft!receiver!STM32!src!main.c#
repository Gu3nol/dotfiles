//#include <string.h>


#include "ch.h"
#include "hal.h"
#include "chprintf.h"
#include "shell.h"
#include "my_uart.h"

#include "debug.h"
#include "leds.h"
#include "codec.h"
#include "measure.h"
#include "communication.h"
#include "serial_shell.h"

extern uint32_t ext_measure[9];
extern uint16_t ext_signs;
/*
 * Control thread definition
 */
static void to_sleep(void){
}

static WORKING_AREA(waControlThread, 1024);
__attribute__((noreturn))
static msg_t control_thread(void* arg){
    (void) arg;
    msg_t signaled;

    /* state = 0 : stop
     *         1 : standby
     *         2 : measures running
     */
    int state = 0;

    //Init measure thread
    //Make it sleep (not yet)
    measure_init(50);
    while(1) {
	signaled = com_wait_event();
	//debug("Event: %x\n\r", signaled);
	switch (signaled) {
	case MEASURES_READY:
	    /*debug("signes: ");
	    for(int i = 8; i >= 0; i--)
		if(ext_signs&(1<<i))
		    debug("1 ");
		else
		    debug("0 ");
	    debug("; mesures: ");*/
	    for (int i = 0;i < 3;i++)
	    	debug("%d ",maximum_measure[i]);
	    for(int i = 0;i<3;i++)
	    	debug("%d ",amplification[i]);
	    debug("\r\n");

	    chMtxLock(&mtx_ext_measures);
	    //	    com_send_measures(ext_measure, ext_signs, 0x0);
        uint8_t button_1 = palReadPad(GPIOD, GPIOD_BUTTON_1) ? 0 : 1;
        uint8_t button_2 = palReadPad(GPIOD, GPIOD_BUTTON_2) ? 0 : 1;
	    com_send_measures(ext_measure, 0x0, ((button_1 << 1) || button_2));
	    chMtxUnlock();
        break;

	case CMD_OFF:
	    //debug("CMD_OFF\r\n");
	    if(state){
		if(state == 2)
		    measure_stop();
		state = 0;
		to_sleep();
	    }
	    break;

	case CMD_ON:
	    //debug("CMD_ON\r\n");
	    if(state != 2){
		// Initialize the measure
		state = measure_start(50) ? 1 : 2;
	    }
	    //com_send_measures(test_measure, 0x155, 0x0);
	    break;

	case CMD_STANDBY:
	    //debug("CMD_STANDBY\r\n");
	    // TODO : add timeout to sleep
	    if(state == 2){
		measure_stop();
	    }
	    state = 1;
	    break;

	case CMD_FREQ:
	    //debug("CMD_FREQ\r\n");
	    if (state==2){
		//measure_stop();
		//measure_start(new_freq);
		set_emit_frequency(50);
	    }
	    break;

	case CMD_CALIB:
	    //debug("CMD_CALIB\r\n");
	    measure_set_calib(new_calib);
	    break;
	}
    }
}

/*
 * Drivers declarations
 */

int main(void) {
    halInit();
    chSysInit();
    /*
     * Activate LED on board
     */
    led_init();
    /*
     * Initialize communication thread
     */
    com_init();
    /*
     * Activate the control thread
     */
    chThdCreateStatic(waControlThread, sizeof(waControlThread), NORMALPRIO, control_thread, NULL);

    chThdSleepMilliseconds(TIME_INFINITE);
}
