/*
 * =============================================================================
 *
 *       Filename:  video_in.cpp
 *
 * =============================================================================
 */

module video_in (
                 input               signal_clk,
                 input               pixel_clk,
                 input               signal_resetn,
                 input               frame_valid,
                 input               line_valid,
                 input               pixel_in,
                 output              p_int,
                 // WB slave signal
                 input logic [31:0]  p_wb_slave_DAT_I,
                 output logic [31:0] p_wb_slave_DAT_O,
                 input logic [31:0]  p_wb_slave_ADR_I,
                 output logic        p_wb_slave_ACK_O,
                 input               p_wb_slave_CYC_I,
                 output              p_wb_slave_ERR_O,
                 input               p_wb_slave_LOCK_I,
                 output              p_wb_slave_RTY_O,
                 input [3:0]         p_wb_slave_SEL_I,
                 input               p_wb_slave_STB_I,
                 input               p_wb_slave_WE_I,
                 // WB master signal
                 output logic [31:0] p_wb_master_DAT_O,
                 input logic [31:0]  p_wb_master_DAT_I,
                 output logic [31:0] p_wb_master_ADR_O,
                 input logic         p_wb_master_ACK_I,
                 output              p_wb_master_CYC_O,
                 input               p_wb_master_ERR_I,
                 output              p_wb_master_LOCK_O,
                 input               p_wb_master_RTY_I,
                 output [3:0]        p_wb_master_SEL_O,
                 output              p_wb_master_STB_O,
                 output              p_wb_master_WE_O);




   // Declaration of registers for internal variables
   logic                             run;
   integer                           next_address_base;
   integer                           laddr;

   //always acknowledge requests
   assign p_wb_DAT_O = next_address_base;

   always_ff @(posedge signal_clk)
     begin
	    // Synchronous reset
	    if (!signal_resetn)
          begin
		     p_wb_slave_DAT_O <= 'b0;
		     p_wb_slave_ACK_O <= 'b0;
		     next_address_base <= 'b0;
		     run <= 'b0;
	      end

        else
          begin
             p_wb_slave_ACK_O <= 'b0;
             p_wb_slave_DAT_O <= 'b0;

             if (p_wb_slave_STB_I && !p_wb_slave_ACK_O)
               begin
                  p_wb_slave_ACK_O<= 1'b1;
                  if(p_wb_slave_WE_I)
                    begin
                       case(laddr)
                         0 :
                           begin
                              run <= p_wb_slave_DAT_I[0];
                              //pragma translate_off
                              $display ("VIDEO_IN : RUN %h",run);
                              //pragma translate_on
                           end
                         4 :
                           begin
                              next_address_base <= p_wb_slave_DAT_I;
                              //pragma translate_off
                              $display ("VIDEO_IN : next_address_base modifiÃ©e : %h",next_address_base);
                              //pragma translate_on
                           end
                         default :
                           begin
                              //pragma translate_off
                              $display ("VIDEO_IN : error slave");
                              //pragma translate_on
                           end
                       endcase
                    end
               end
          end // else: !if(!signal_resetn)
     end // always_ff @
endmodule