LIBRARY IEEE;
LIBRARY WORK;
USE ieee.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;               -- add unsigned, signed
USE work.pix_cache_pak.ALL;

ENTITY change IS -- entity corresponding to the change block in the diagram
  PORT(
    wen_all         : IN std_logic;
    pixopin, dout1  : IN pixop_t;
    din1            : OUT pixop_t
    );
END change;

ARCHITECTURE arch_comb OF change IS
BEGIN

  P1: PROCESS(wen_all, pixopin, dout1)
  BEGIN
    din1 <= pixopin; -- in most of the cases din1 is equal to pixopin. Exceptions are handled below
    
    IF wen_all = '0' THEN
      IF pixopin = same THEN -- directly forward dout1 to din1
        din1 <= dout1;
      END IF;
      IF pixopin = invert THEN -- implementation of the invert operation
        CASE dout1 IS
        WHEN same   => din1 <= invert;
        WHEN invert => din1 <= same;
        WHEN black  => din1 <= white;
        WHEN white  => din1 <= black;
        WHEN OTHERS => NULL;
        END CASE;
      END IF;
    END IF;
  END PROCESS P1;

END ARCHITECTURE arch_comb;

LIBRARY IEEE;
LIBRARY WORK;
USE ieee.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;               -- add unsigned, signed
USE work.pix_cache_pak.ALL;

ENTITY pix_word_cache IS

  PORT(
    clk, reset, pw, wen_all : IN  std_logic;
    pixnum                  : IN  std_logic_vector(3 DOWNTO 0);
    pixopin                 : IN  pixop_t;
    store                   : OUT store_t;
    is_same                 : OUT std_logic
    );

END pix_word_cache;


ARCHITECTURE rtl OF pix_word_cache IS
  SIGNAL din1, dout1 : pixop_t;
  SIGNAL ram : store_t;
BEGIN

C1 : ENTITY WORK.change PORT MAP (wen_all, pixopin, dout1, din1);

ram_comb : PROCESS(pixnum, ram) -- combinational process for pix_word_cache
BEGIN
  dout1 <= ram(to_integer(unsigned(pixnum)));
  is_same <= '1';
  
  FOR i IN ram'RANGE LOOP
    IF ram(i) /= same THEN is_same <= '0'; END IF;
  END LOOP;
END PROCESS ram_comb;

ram_clocked : PROCESS -- clocked process for pix_word_cashe
BEGIN
  WAIT UNTIL clk'EVENT and clk='1';
  IF wen_all = '1' THEN
    ram <= (OTHERS=>same);
  END IF;
  IF pw = '1' THEN -- implement writing to ram
    ram(to_integer(unsigned(pixnum))) <= din1;
  END IF;
  IF RESET = '1' THEN -- implement reset
    ram <= (OTHERS=>same);
  END IF;
END PROCESS ram_clocked;
    
store <= ram;
    
END ARCHITECTURE rtl;








